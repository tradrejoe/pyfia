<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>ROOT</display-name>

	<description>Pyfia</description>

	<!-- Key of the system property that should specify the root directory of 
		this web app. Applied by WebAppRootListener or Log4jConfigListener. -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>pyfia.root</param-value>
	</context-param>

	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>${web.xml.env}</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>${web.xml.env}</param-value>
	</context-param>
	<context-param>
		<param-name>spring.liveBeansView.mbeanDomain</param-name>
		<param-value>${web.xml.env}</param-value>
	</context-param>

	<!-- Location of the Log4J config file, for initialization and refresh checks. 
		Applied by Log4jConfigListener. -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/resources/log4j.properties</param-value>
	</context-param>

	<!-- - Location of the XML file that defines the root application context. 
		- Applied by ContextLoaderServlet. - - Can be set to: - "/WEB-INF/applicationContext-hibernate.xml" 
		for the Hibernate implementation, - "/WEB-INF/applicationContext-jpa.xml" 
		for the JPA one, or - "/WEB-INF/applicationContext-jdbc.xml" for the JDBC 
		one. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/pyfia-servlet.xml</param-value>
	</context-param>
	<context-param>
		<param-name>log4jContextName</param-name>
		<param-value>pyfia</param-value>
		<!-- <param-value>/WEB-INF/spring/applicationContext-jpa.xml</param-value> -->

		<!-- To use the JPA variant above, you will need to enable Spring load-time 
			weaving in your server environment. Out of the box, Spring will try to detect 
			the running environment and use the appropriate weaver but if that fails, 
			one must enable one by hand or use the VM-wide weaver. See Spring's JPA documentation 
			for more information. -->
	</context-param>
	<!-- - Configures Log4J for this web app. - As this context specifies a 
		context-param "log4jConfigLocation", its file path - is used to load the 
		Log4J configuration, including periodic refresh checks. - - Would fall back 
		to default Log4J initialization (non-refreshing) if no special - context-params 
		are given. - - Exports a "web app root key", i.e. a system property that 
		specifies the root - directory of this web app, for usage in log file paths. 
		- This web app specifies "pyfia.root" (see log4j.properties file). -->
	<!-- Leave the listener commented-out if using JBoss, for spring prior to 
		5.x -->
	<!--listener> <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> 
		</listener -->
	<listener>
		<listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
	</listener>

	<filter>
		<filter-name>log4jServletFilter</filter-name>
		<filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>log4jServletFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>ERROR</dispatcher>
		<dispatcher>ASYNC</dispatcher><!-- Servlet 3.0 w/ disabled auto-initialization 
			only; not supported in 2.5 -->
	</filter-mapping>
	<!-- - Loads the root application context of this web app at startup, - 
		by default from "/WEB-INF/applicationContext.xml". - Note that you need to 
		fall back to Spring's ContextLoaderServlet for - J2EE servers that do not 
		follow the Servlet 2.4 initialization order. - - Use WebApplicationContextUtils.getWebApplicationContext(servletContext) 
		- to access it anywhere in the web application, outside of the framework. 
		- - The root context is the parent of all servlet-specific contexts. - This 
		means that its beans are automatically available in these child contexts, 
		- both for getBean(name) calls and (external) bean references. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>com.uxl.sites.pyfia.web.listeners.SessionListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>pyfia</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!-- - Maps the pyfia dispatcher to "*.do". All handler mappings in - pyfia-servlet.xml 
		will by default be applied to this subpath. - If a mapping isn't a /* subpath, 
		the handler mappings are considered - relative to the web app root. - - NOTE: 
		A single dispatcher can be mapped to multiple paths, like any servlet. -->
	<servlet-mapping>
		<servlet-name>pyfia</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Reads request input using UTF-8 encoding -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>httpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>httpMethodFilter</filter-name>
		<servlet-name>pyfia</servlet-name>
	</filter-mapping>

	<filter>
		<filter-name>responseContextHolderFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>responseContextHolderFilterBean</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>responseContextHolderFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>deviceResolverRequestFilter</filter-name>
		<filter-class>org.springframework.mobile.device.DeviceResolverRequestFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>deviceResolverRequestFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>

	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/WEB-INF/views/uncaughtException.jsp</location>
	</error-page>

	<!-- eliminate welcome files -->
	<!-- useful for Servlet 3 container (Tomcat 7 and Jetty 6) -->
	<welcome-file-list>
		<welcome-file></welcome-file>
	</welcome-file-list>

	<!-- - Reference to Pyfia database. - Only needed if not using a local DataSource 
		but a JNDI one instead. -->
	<!-- <resource-ref> <res-ref-name>jdbc/pyfia</res-ref-name> <res-type>javax.sql.DataSource</res-type> 
		<res-auth>Container</res-auth> </resource-ref> -->
	<mime-mapping>
		<extension>properties</extension>
		<mime-type>text/plain</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>mp4</extension>
		<mime-type>video/mp4</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>flv</extension>
		<mime-type>video/x-flv</mime-type>
	</mime-mapping>
</web-app>