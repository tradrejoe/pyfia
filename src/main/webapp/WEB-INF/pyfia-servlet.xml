<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<!-- context:annotation-config/ -->

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
		
		for mode="aspectj"/ see SPR-6392
	-->
	<tx:annotation-driven/>
	
	<context:component-scan base-package="com.uxl.sites, org.lc" />
	
	<!-- context:component-scan base-package="com.uxl.sites.pyfia">
	  <context:include-filter type="aspectj" expression="com.uxl.sites.pyfia.*.*" />
	  <context:include-filter type="aspectj" expression="com.uxl.sites.pyfia.*" />
	</context:component-scan -->
	
	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />	

  <mvc:annotation-driven>
     <mvc:argument-resolvers>
        <bean class="org.springframework.mobile.device.DeviceWebArgumentResolver" />
     </mvc:argument-resolvers>
     <mvc:message-converters>
        <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
     </mvc:message-converters>     
   </mvc:annotation-driven>
   

  
	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
		Force the use of CGLIB proxies.
	-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<import resource="spring/applicationContext-hibernate.xml" />
	<import resource="spring/applicationContext-jdbc.xml" />
	<import resource="spring/pyfia-tiles.xml" />
		
	<!-- bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/resources/application.properties</value>
			</list>
		</property>
	</bean-->
	<!-- bean id="clsDs" class="com.uxl.sites.pyfia.jdbc.ClsDS"/-->
	<!-- bean id="pd" class="com.uxl.sites.pyfia.web.YPriceDownloader"/-->
	<!-- bean id="fincastProcesor" class="com.uxl.sites.pyfia.controller.FincastProcessor"/-->
	
		<!-- Forwards requests to the "/" resource to the "welcome" view -->
	<mvc:view-controller path="/" view-name="index"/>

	<!-- Configures Handler Interceptors -->	
	<mvc:interceptors>
		<!-- Changes the locale when a 'locale' request parameter is sent; e.g. /?locale=de -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	     <!-- On pre-handle, resolve the device that originated the web request -->
	     <bean class="org.springframework.mobile.device.DeviceResolverHandlerInterceptor" />
	    <!-- Manage the user's site preference -->
	    <bean class="org.springframework.mobile.device.site.SitePreferenceHandlerInterceptor" />
	  </mvc:interceptors>	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<!--mvc:resources mapping="/resources/**" location="/resources/" /-->
	<mvc:resources mapping="/**" location="/" />

	<!-- Saves a locale change using a cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />

	<!-- Application Message Bundle -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/WEB-INF/messages/messages" />
		<property name="cacheSeconds" value="0" />
	</bean>

	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
				<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
			</props>
		</property>
	</bean>
	
	<!-- Converting http param to json object. -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>	
	
	<bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
	
	<bean id="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jacksonMessageConverter"/>
			</list>
		</property>
	</bean>
	
	<bean name="responseContextHolderFilterBean" class="org.lc.web.filters.ResponseContextHolderFilter"/>
</beans>